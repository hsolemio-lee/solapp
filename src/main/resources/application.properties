# 1. Server Setting ( LOCAL)
server.port = 80

# H2 설정
spring.h2.console.enabled=true
spring.h2.console.path=/h2


# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# MySQL 을 사용할 것.
spring.jpa.database=mysql

# Datasource 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/solapp
spring.datasource.username=root
spring.datasource.password=hslee4916!
spring.datasource.hikari.jdbc-url=jdbc:mysql://localhost:3306/solapp?serverTimezone=UTC&characterEncoding=UTF-8
spring.datasource.hikari.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.username=root
spring.datasource.hikari.password=hslee4916!
spring.datasource.hikari.connection-test-query=SELECT NOW() FROM dual

#jpa 설정
spring.jpa.hibernate.ddl-auto=update


# 로깅레벨
logging.level.com.sol=debug

# 파일 업로드 설정
spring.servlet.multipart.maxFileSize=10MB
spring.servlet.multipart.maxRequestSize=10MB

# Google oauth
spring.security.oauth2.client.registration.google.client-id=309057805423-0irss9vp812ko4icpr694c9i21t9htnu.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=sTMWI1Io95wCxPub-BeFEj8n
spring.security.oauth2.client.registration.google.scope=profile,email

spring.profiles.include=oauth

# jwtToken Properties
jwt.token.code=sol

#smartthings
smartthings.api.auth.token=9cbe1d06-55fe-41a9-8340-88bbe3dcdbd8


